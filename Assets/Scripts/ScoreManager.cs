using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using TMPro;public class ScoreManager : MonoBehaviour{    int score;    int highScore;    int multiplier = 1;    int previous = -1;    bool isSuper = false;    public int superTime = 5;    float super = 0;    public int superScore = 1000;    public int scoreBlockIncrease = 25;    public Color orangeIsh;    public Color purply;    public Color blueGreen;    public Color darkGray;    public GameObject text;    GameObject[] texts;    public Image superFill;    public Button superButton;    public TextMeshProUGUI superText;    public Animator outline;    public ShootingController leftPlayer;    public ShootingController rightPlayer;    private static ScoreManager _instance;    public static ScoreManager Instance {        get {            return _instance;        }    }    public TextMeshProUGUI scoreText;    public TextMeshProUGUI highScoreText;    private void Awake()    {        if (_instance != null && _instance != this)        {            Destroy(this.gameObject);        } else {            _instance = this;        }    }    private void Start()    {        highScore = PlayerPrefs.GetInt("highScore", 0);        highScoreText.SetText("BEST: " + highScore.ToString());        texts = new GameObject[20];        for(int i = 0; i < 20; i++) {            GameObject obj = Instantiate(text);            obj.SetActive(false);            texts[i] = obj;        }    }    public void AddScore(int amount, int block, Vector3 pos) {        if(previous == block) {            multiplier++;            if(pos != new Vector3(0, 0, 0)) {                for(int i = 0; i < texts.Length; i++) {                    if(!texts[i].activeInHierarchy) {                        texts[i].transform.position = new Vector3(0, 0, 0);                        texts[i].GetComponentsInChildren<Transform>()[1].position = pos;                        texts[i].GetComponentsInChildren<TextMeshPro>()[0].text = "x" + multiplier;                        texts[i].SetActive(true);                        texts[i].GetComponent<Animator>().Play("MultiplierAnim", -1, 0f);                        break;                    }                }            }        } else {            multiplier = 1;        }        score += amount * multiplier;        if(isSuper == false) {
            super += amount * multiplier;            superFill.fillAmount = super / superScore;
        }        if(superFill.fillAmount == 1) {            superText.color = Color.white;            outline.Play("Outline");        }         previous = block;        UpdateScore();    }    public void SUPER() {        if(superFill.fillAmount == 1) {            isSuper = true;            super = 0;            superText.color = new Color(0.1568628f, 0.1568628f, 0.1568628f);            outline.Play("New State");            superFill.fillAmount = 0;            // do it            leftPlayer.CancelInvoke();            leftPlayer.InvokeRepeating("SUPER", 0, .10f);            rightPlayer.CancelInvoke();            rightPlayer.InvokeRepeating("SUPER", 0, .10f);            StartCoroutine(Super());        }    }    IEnumerator Super() {        yield return new WaitForSeconds(superTime);        leftPlayer.CancelInvoke();        leftPlayer.StartGame();        rightPlayer.CancelInvoke();        rightPlayer.StartGame();        isSuper = false;    }    public void ScoreBlock(Vector3 pos) {        if(Manager.Instance.getGameStatus() == false) {            AddScore(scoreBlockIncrease, -1, new Vector3(0, 0, 0));            for(int i = 0; i < texts.Length; i++) {                if(!texts[i].activeInHierarchy) {                    texts[i].transform.position = new Vector3(0, 0, 0);                    texts[i].GetComponentsInChildren<Transform>()[1].position = pos;                    texts[i].GetComponentInChildren<TextMeshPro>().text = "+" + scoreBlockIncrease;                    texts[i].SetActive(true);                    texts[i].GetComponent<Animator>().Play("MultiplierAnim", -1, 0f);                    break;                }            }        }    }    public void ResetScore() {        score = 0;        highScoreText.SetText("BEST: " + highScore.ToString());        UpdateScore();    }    private void UpdateScore() {        scoreText.SetText(score.ToString());    }    public void UpdateHighScore() {        if(score > highScore) {            PlayerPrefs.SetInt("highScore", score);            highScore = score;            scoreText.gameObject.GetComponent<Animator>().Play("scorePulse");            //upload to gamecenter        }    }}